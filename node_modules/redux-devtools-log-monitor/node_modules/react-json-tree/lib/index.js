'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp; // ES6 + inline style port of JSONViewer https://bitbucket.org/davevedder/react-json-viewer/
// all credits and original code to the author
// Dave Vedder <veddermatic@gmail.com> http://www.eskimospy.com/
// port by Daniele Zannotti http://www.github.com/dzannotti <dzannotti@me.com>

exports.__esModule = true;
exports.default = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _grabNode = require('./grab-node');

var _grabNode2 = _interopRequireDefault(_grabNode);

var _solarized = require('./themes/solarized');

var _solarized2 = _interopRequireDefault(_solarized);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  tree: {
    border: 0,
    padding: 0,
    marginTop: 8,
    marginBottom: 8,
    marginLeft: 2,
    marginRight: 0,
    fontSize: '0.90em',
    listStyle: 'none',
    MozUserSelect: 'none',
    WebkitUserSelect: 'none'
  }
};

var getEmptyStyle = function getEmptyStyle() {
  return {};
};
var identity = function identity(value) {
  return value;
};

var JSONTree = (_temp = _class = function (_React$Component) {
  _inherits(JSONTree, _React$Component);

  function JSONTree(props) {
    _classCallCheck(this, JSONTree);

    return _possibleConstructorReturn(this, _React$Component.call(this, props));
  }

  JSONTree.prototype.render = function render() {
    var getStyles = {
      getArrowStyle: this.props.getArrowStyle,
      getListStyle: this.props.getListStyle,
      getItemStringStyle: this.props.getItemStringStyle,
      getLabelStyle: this.props.getLabelStyle,
      getValueStyle: this.props.getValueStyle
    };

    var _props = this.props;
    var value = _props.data;
    var initialExpanded = _props.expandRoot;
    var getItemString = _props.getItemString;
    var labelRenderer = _props.labelRenderer;
    var valueRenderer = _props.valueRenderer;
    var key = _props.keyName;
    var previousData = _props.previousData;
    var theme = _props.theme;

    var rootNode = (0, _grabNode2.default)({
      getItemString: getItemString,
      initialExpanded: initialExpanded,
      key: key,
      previousData: previousData,
      styles: getStyles,
      theme: theme,
      labelRenderer: labelRenderer,
      value: value,
      valueRenderer: valueRenderer
    });

    return _react2.default.createElement(
      'ul',
      { style: _extends({}, styles.tree, this.props.style) },
      rootNode
    );
  };

  return JSONTree;
}(_react2.default.Component), _class.propTypes = {
  data: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.array, _react2.default.PropTypes.object]).isRequired
}, _class.defaultProps = {
  expandRoot: true,
  keyName: 'root',
  theme: _solarized2.default,
  getArrowStyle: getEmptyStyle,
  getListStyle: getEmptyStyle,
  getItemStringStyle: getEmptyStyle,
  getLabelStyle: getEmptyStyle,
  getValueStyle: getEmptyStyle,
  getItemString: function getItemString(type, data, itemType, itemString) {
    return _react2.default.createElement(
      'span',
      null,
      itemType,
      ' ',
      itemString
    );
  },
  labelRenderer: identity,
  valueRenderer: identity
}, _temp);
exports.default = JSONTree;