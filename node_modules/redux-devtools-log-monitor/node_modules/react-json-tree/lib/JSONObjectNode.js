'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.__esModule = true;

exports.default = function (_ref3) {
  var props = _objectWithoutProperties(_ref3, []);

  return _react2.default.createElement(_JSONNestedNode2.default, _extends({}, props, {
    getChildNodes: getChildNodes,
    nodeType: 'Object',
    nodeTypeIndicator: '{}',
    renderItemString: renderItemString
  }));
};

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _JSONNestedNode = require('./JSONNestedNode');

var _JSONNestedNode2 = _interopRequireDefault(_JSONNestedNode);

var _grabNode = require('./grab-node');

var _grabNode2 = _interopRequireDefault(_grabNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// Returns the "n Items" string for this node, generating and caching it if it hasn't been created yet.
function renderItemString(_ref) {
  var data = _ref.data;
  var getItemString = _ref.getItemString;
  var itemString = _ref.itemString;
  var itemType = _ref.itemType;

  if (!itemString) {
    var len = Object.keys(data).length;
    itemString = len + ' key' + (len !== 1 ? 's' : '');
  }
  return getItemString('Object', data, itemType, itemString);
}

// Returns the child nodes for each entry in iterable.
// If we have generated them previously we return from cache; otherwise we create them.
function getChildNodes(_ref2) {
  var data = _ref2.data;
  var getItemString = _ref2.getItemString;
  var labelRenderer = _ref2.labelRenderer;
  var previousData = _ref2.previousData;
  var styles = _ref2.styles;
  var theme = _ref2.theme;
  var valueRenderer = _ref2.valueRenderer;

  var childNodes = [];
  for (var key in data) {
    if (Object.getPrototypeOf(data) === null || data.hasOwnProperty(key)) {
      var previousDataValue = undefined;
      if (typeof previousData !== 'undefined' && previousData !== null) {
        previousDataValue = previousData[key];
      }

      var node = (0, _grabNode2.default)({
        getItemString: getItemString,
        key: key,
        labelRenderer: labelRenderer,
        previousData: previousDataValue,
        renderItemString: renderItemString,
        styles: styles,
        theme: theme,
        value: data[key],
        valueRenderer: valueRenderer
      });

      if (node !== false) {
        childNodes.push(node);
      }
    }
  }

  return childNodes;
}

// Configures <JSONNestedNode> to render an Object